/*
  *********************************************************************************************
  * ( )[ ][ ]                                                                                 *
  * [ ][ ]                                                                                    *
  * [ ][ ][ ]                                                                                 *
  * [ ][ ]    - IFCE - Padr√µes de Projetos - 2021.1 - Prof.Ronaldo üé∑                         *
  *                                                                                           *
  *********************************************************************************************
	*Coment√°rios:

  // Em vez de usar uma interface de forma tradicional
	// usamos uma vari√°vel de inst√¢ncia que √© uma subclasse
	// da interface da classe TocaInstrumento.
	
	// A nossa classe 'Musico.java' n√£o se importa com o que 'capacidade_de_tocar_instrumento' faz,
	// ela apenas sabe que tal 'comportamento' est√° dispon√≠vel para suas subclasses
	
	// Isso √© conhecido como 'Composi√ß√£o': Em vez de herdar
	// uma habilidade por heran√ßa a classe √© composta
	// com objetos com a habilidade certa.
	
	// Usar de 'Composi√ß√£o' aqui tamb√©m nos d√° muitas outras vantagens 
  //(Principalmente quanto a rodar nossa aplica√ß√£o em TEMPO DE EXECU√á√ÉO ;D)

  *********************************************************************************************
  */

public class Musico {
	private String nome;
  private String tipo;
  private String instrumento;
	
	public TocaInstrumento capacidade_de_tocar_instrumento;
	
  public void setNome(String newNome){ tipo = newNome; }
	public String getNome(){ return tipo; }

	public void setTipo(String newTipo){ nome = newTipo; }
	public String getTipo(){ return nome; }

  public void setInstrumento(String newInstrumento){ instrumento = newInstrumento; }
	public String getInstrumento(){ return instrumento; }
	
	/* Obs. Cuidado:
	* N√£o queremos adicionar metodos a super classe.
	* Precisamos separar o que √© DIFERENTE entre as subclasses e a super classe!
	*/
	
	public String tocarInstrumento(){
		
		return capacidade_de_tocar_instrumento.capacidade_de_tocar();
		
	}
	
	// O m√©todo abaixo permite-nos "setar" dinamicamente a capacidade de um dos m√∫sicos "tocar" ou n√£o seu instrumento!
	public void setCapacidadeDeTocar(TocaInstrumento newCapacidadeDeTocarInstrumento){
		
		capacidade_de_tocar_instrumento = newCapacidadeDeTocarInstrumento;
		
	}
	
}

	
	