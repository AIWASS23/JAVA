/*
  *********************************************************************************************
  * ( )[ ][ ]                                                                                 *
  * [ ][ ]                                                                                    *
  * [ ][ ][ ]                                                                                 *
  * [ ][ ]    - IFCE - Padr√µes de Projetos - 2021.1 - Prof.Ronaldo üé∑                         *
  *                                                                                           *
  *********************************************************************************************
  * *Coment√°rios: C√≥digo implementando o PP do tipo "Private Class Data"
  *********************************************************************************************
  * *Obs. Esse padr√£o busca reduzir a exposi√ß√£o de atributos limitando sua 'visibilidade' em 
  rela√ß√£o as outras classes. Tamb√©m, reduz o n√∫mero de atributos de classe, encapsulando-os 
  em um √∫nico objeto de dados. Ele permite que o designer da classe remova o 'privil√©gio 
  da grava√ß√£o de atributos' que devem ser definidos apenas durante a constru√ß√£o da classe, 
  mesmo a partir de m√©todos da classe alvo. Nesse simples exemplo trato a situa√ß√£o como uma 
  'aula de culin√°ria de ensopado (Aqui chamo de 'Sopa' mesmo kkkk) com alguns ingredientes 
  dados num construtor. Ent√£o, temos m√©todos para enumerar os ingredientes e saborear nossa 
  sopa. O m√©todo de 'degusta√ß√£o/Provar' do ensopado altera os membros privados do aula de 
  guisado/Sopa. 
  *********************************************************************************************
  * * (Definindo o PP - "Private Class Data") - Segundo a defini√ß√£o da Wikip√©dia: 
  * √â um padr√£o de design em programa√ß√£o de computador usado para 'encapsular atributos' de uma 
  classe para sua manipula√ß√£o. Ele funciona 'extraindo' uma classe de dados para a classe de 
  destino e fornecendo √† inst√¢ncia da classe de destino uma inst√¢ncia da classe de dados extra√≠da.

    - A classe de dados exp√µe cada atributo (vari√°vel ou propriedade) por meio de um 'getter'.
    - A classe de dados exp√µe cada atributo que deve ser alterado ap√≥s a constru√ß√£o por meio de 
      um 'configurador'. 

    - Mais informa√ß√µes no link (Em ingl√™s) abaixo: 
      https://en.wikipedia.org/wiki/Private_class_data_pattern#Applicability

  - Obs. Como o professor disse, realmente √© dif√≠cil achar matrerial dese padr√£o, apesar de n√£o ser
  uma estrat√©gia 't√£o complicada' kkkk (Fazer o que n√©?).
  *********************************************************************************************
	*/

class Main {
  public static void main(String[] args) {

    System.out.println(" ");
    System.out.println("---------------------------------------------------------------");
    System.out.println("IFCE - Prof.Ronaldo Ramos üé∑ - PP - Private Class Data ");
    System.out.println("---------------------------------------------------------------");
    System.out.println(" ");
    System.out.println("üë®‚Äçüç≥  ~ \"Quem quer sopa?\"  ");
    System.out.println(" ");

    // Aqui, nossa sopa √© 'mut√°vel' como 'classe:'
    Sopa sopa = new Sopa(1, 2, 3, 4);
    sopa.mistura();
    sopa.provar();
    sopa.mistura();
    
    // Aqui, nossa sopa √© 'imut√°vel' (Por isso chamei de 'Original') como 'classe:'
    // ( A classe √©, tamb√©m, 'protegida' com o 'PP': Private Class Data )
    SopaOriginal sopaOriginal = new SopaOriginal(2, 4, 3, 6);
    sopaOriginal.mistura();

    System.out.println(" ");
    System.out.println("üë®‚Äçüç≥  ~ \"Muito Bom!\"  ");

  }
}