/*
  *********************************************************************************************
  * ( )[ ][ ]                                                                                 *
  * [ ][ ]                                                                                    *
  * [ ][ ][ ]                                                                                 *
  * [ ][ ]    - IFCE - Padr√µes de Projetos - 2021.1 - Prof.Ronaldo üé∑                         *
  *                                                                                           *
  *********************************************************************************************
  * *Coment√°rios: C√≥digo implementando o PP do tipo "Builder"
  *********************************************************************************************
  * *Obs. N√£o pus tantos coment√°rios dessa vez porque acho que o c√≥digo est√° bem organizado
  *  e f√°cil de entender o que ele faz, at√© porque como havia dito √© uma estrutura simples que, mais uma vez assim como a anterior, trabalha com modelos de carros dos tipos Fiat e Volkswagen. Aqui temos 2 classes "Builder" referentes aos 2 modelos trabalhados de carros e 1 classe builder mais "geral" referente aos objetos do tipo "carro" mesmo e √© por ela que transmitimos aos objetos de uma das 2 classes dos modelos trabalhados os m√©todos e atributos "gerais" especificados para um objeto do tipo "carro". Al√©m das classes "Builders" temos as classes auxiliares "CarroProduct.java" e "ConcessionariaDirector.java" que auxiliam na cria√ß√£o dos objetos organizando melhor o c√≥digo e o seu entendimento. Para mais detalhes olhe as outras classes para ver resumidamente cada classe faz!
  *********************************************************************************************
  * * (Definindo o PP - "Builder") - Segundo a defini√ß√£o da Wikip√©dia: 
  * O padr√£o Builder √© um design pattern de cria√ß√£o com a inten√ß√£o de encontrar a solu√ß√£o anti-pattern "constructor telescoping".
  *********************************************************************************************
	*/

public class Main {

	public static void main(String[] args) {

		ConcessionariaDirector concessionaria = new ConcessionariaDirector(new FiatBuilder());

    System.out.println(" ");
    System.out.println("---------------------------------------------------------------");
    System.out.println("IFCE - Prof.Ronaldo Ramos üé∑ - PP - Builder (Exemplo) ");
    System.out.println("---------------------------------------------------------------");
    System.out.println(" ");
	 
	  concessionaria.construirCarro();
	  CarroProduct carro = concessionaria.getCarro();
    System.out.println("---------------------------------------------------------------");
    System.out.println("* üöó  O Modelo constru√≠do pelo Builder criado √©: ");
    System.out.println("---------------------------------------------------------------");
    System.out.println("\\≈çÕ°‚â°oÀûÃ∂      ****************************************************");
    System.out.println("Carro: " + carro.modelo + "/" + carro.montadora
            + "\nAno: " + carro.anoDeFabricacao + "\nMotor: "
            + carro.dscMotor + "\nValor: " + carro.preco);
	 
	  System.out.println();
	 
    concessionaria = new ConcessionariaDirector(new VolksBuilder());
    concessionaria.construirCarro();
    carro = concessionaria.getCarro();
    System.out.println("---------------------------------------------------------------");
    System.out.println("* üöó  O Modelo constru√≠do pelo Builder criado √©: ");
    System.out.println("---------------------------------------------------------------");
    System.out.println("\\≈çÕ°‚â°oÀûÃ∂      ****************************************************");
    System.out.println("Carro: " + carro.modelo + "/" + carro.montadora
            + "\nAno: " + carro.anoDeFabricacao + "\nMotor: "
            + carro.dscMotor + "\nValor: " + carro.preco);

	}

}